"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.15.0
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from TractionGuest.api_client import ApiClient, Endpoint as _Endpoint
from TractionGuest.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from TractionGuest.model.audit_log import AuditLog
from TractionGuest.model.errors_list import ErrorsList
from TractionGuest.model.paginated_audit_logs_list import PaginatedAuditLogsList


class AuditLogsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_audit_log(
            self,
            audit_log_id,
            **kwargs
        ):
            """Get an AuditLog  # noqa: E501

            Gets the details of a single instance of an `AuditLog`.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_audit_log(audit_log_id, async_req=True)
            >>> result = thread.get()

            Args:
                audit_log_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AuditLog
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['audit_log_id'] = \
                audit_log_id
            return self.call_with_http_info(**kwargs)

        self.get_audit_log = _Endpoint(
            settings={
                'response_type': (AuditLog,),
                'auth': [],
                'endpoint_path': '/audit_logs/{audit_log_id}',
                'operation_id': 'get_audit_log',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'audit_log_id',
                ],
                'required': [
                    'audit_log_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'audit_log_id':
                        (str,),
                },
                'attribute_map': {
                    'audit_log_id': 'audit_log_id',
                },
                'location_map': {
                    'audit_log_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_audit_log
        )

        def __get_audit_logs(
            self,
            **kwargs
        ):
            """List all AuditLogs  # noqa: E501

            Gets a list of all `AuditLog` entities.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_audit_logs(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Limits the results to a specified number, defaults to 50. [optional]
                offset (int): Offsets the results to a specified number, defaults to 0. [optional]
                sort_by (str): Sorts by the field name and direction provided where the pattern is `FIELD_NAME_DIRECTION`. [optional]
                auditable_id (int): The unique ID of a model that has associated audit logs. [optional]
                auditable_type (str): The name of the model that has associated audit logs. Valid values include: - `user` - `device_configuration` - `signin` - `invite` - `watchlist_record` - `account_preference` - `signout` - `host` - `invite_watchlist` - `location_preference` - `parking_lot` - `parking_stall` - `permission_bundle` - `person` - `physical_access_grant` - `physical_access_provider` - `physical_access_rule` - `security_badge_type` - `signin_watchlist` - `user_group_physical_access_rule` - `visitor` - `bulk_data_batch` . [optional]
                action_type (str): The action performed by the user. Valid values include: - `create` - `update` - `destroy` . [optional]
                user_id (int): The ID of the user who performed the database change. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedAuditLogsList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_audit_logs = _Endpoint(
            settings={
                'response_type': (PaginatedAuditLogsList,),
                'auth': [],
                'endpoint_path': '/audit_logs',
                'operation_id': 'get_audit_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                    'sort_by',
                    'auditable_id',
                    'auditable_type',
                    'action_type',
                    'user_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'sort_by':
                        (str,),
                    'auditable_id':
                        (int,),
                    'auditable_type':
                        (str,),
                    'action_type':
                        (str,),
                    'user_id':
                        (int,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                    'sort_by': 'sort_by',
                    'auditable_id': 'auditable_id',
                    'auditable_type': 'auditable_type',
                    'action_type': 'action_type',
                    'user_id': 'user_id',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                    'sort_by': 'query',
                    'auditable_id': 'query',
                    'auditable_type': 'query',
                    'action_type': 'query',
                    'user_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_audit_logs
        )
