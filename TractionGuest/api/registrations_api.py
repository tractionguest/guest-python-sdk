"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.15.0
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from TractionGuest.api_client import ApiClient, Endpoint as _Endpoint
from TractionGuest.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from TractionGuest.model.errors_list import ErrorsList
from TractionGuest.model.paginated_registrations_list import PaginatedRegistrationsList
from TractionGuest.model.registration_detail import RegistrationDetail


class RegistrationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_registration(
            self,
            registration_id,
            **kwargs
        ):
            """Get a Registration  # noqa: E501

            Gets the details of a single instance of a `Registration`  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_registration(registration_id, async_req=True)
            >>> result = thread.get()

            Args:
                registration_id (str):

            Keyword Args:
                include (str): A list of comma-separated related models to include. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RegistrationDetail
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['registration_id'] = \
                registration_id
            return self.call_with_http_info(**kwargs)

        self.get_registration = _Endpoint(
            settings={
                'response_type': (RegistrationDetail,),
                'auth': [],
                'endpoint_path': '/registrations/{registration_id}',
                'operation_id': 'get_registration',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'registration_id',
                    'include',
                ],
                'required': [
                    'registration_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'registration_id':
                        (str,),
                    'include':
                        (str,),
                },
                'attribute_map': {
                    'registration_id': 'registration_id',
                    'include': 'include',
                },
                'location_map': {
                    'registration_id': 'path',
                    'include': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_registration
        )

        def __get_registrations(
            self,
            **kwargs
        ):
            """List all Registrations  # noqa: E501

            Gets a list of all `Registration` entities.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_registrations(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Limits the results to a specified number, defaults to 50. [optional]
                offset (int): Offsets the results to a specified number, defaults to 0. [optional]
                location_ids (str): A comma separated list of Location IDs. [optional]
                created_before (str): Restricts results to only those that were created before the provided date. [optional]
                created_after (str): Restricts results to only those that were created after the provided date. [optional]
                needs_confirmation (bool): A confirmed `Registration` is one with an associated `Invite`. This filter returns those without an `Invite` when true, and those with an `Invite` when false.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedRegistrationsList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_registrations = _Endpoint(
            settings={
                'response_type': (PaginatedRegistrationsList,),
                'auth': [],
                'endpoint_path': '/registrations',
                'operation_id': 'get_registrations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                    'location_ids',
                    'created_before',
                    'created_after',
                    'needs_confirmation',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'location_ids':
                        (str,),
                    'created_before':
                        (str,),
                    'created_after':
                        (str,),
                    'needs_confirmation':
                        (bool,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                    'location_ids': 'location_ids',
                    'created_before': 'created_before',
                    'created_after': 'created_after',
                    'needs_confirmation': 'needs_confirmation',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                    'location_ids': 'query',
                    'created_before': 'query',
                    'created_after': 'query',
                    'needs_confirmation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_registrations
        )
