"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.15.0
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from TractionGuest.api_client import ApiClient, Endpoint as _Endpoint
from TractionGuest.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from TractionGuest.model.capacity import Capacity
from TractionGuest.model.capacity_forecast import CapacityForecast
from TractionGuest.model.errors_list import ErrorsList


class CapacitiesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_capacity(
            self,
            location_id,
            **kwargs
        ):
            """Get the current capacity details for a location  # noqa: E501

            Get details of current capacity in a location  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_capacity(location_id, async_req=True)
            >>> result = thread.get()

            Args:
                location_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Capacity
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['location_id'] = \
                location_id
            return self.call_with_http_info(**kwargs)

        self.get_capacity = _Endpoint(
            settings={
                'response_type': (Capacity,),
                'auth': [],
                'endpoint_path': '/locations/{location_id}/capacities',
                'operation_id': 'get_capacity',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'location_id',
                ],
                'required': [
                    'location_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'location_id':
                        (str,),
                },
                'attribute_map': {
                    'location_id': 'location_id',
                },
                'location_map': {
                    'location_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_capacity
        )

        def __get_capacity_forecast(
            self,
            location_id,
            **kwargs
        ):
            """Get the capacity details for a location  # noqa: E501

            Gets the details of the future capacity in a location.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_capacity_forecast(location_id, async_req=True)
            >>> result = thread.get()

            Args:
                location_id (str):

            Keyword Args:
                hours_to_forecast (int): The next N number of hours, the data needs to be calculated. Range from 1 to 24. If not set, it defaults to 8.. [optional] if omitted the server will use the default value of 8
                timestamp (str): ISO8601 timestamp(includes the offset value) to use as the start point for the capacity estimate report. Defaults to the current local timestamp of the location if not provided. Eg: \"2020-07-16T17:05:08-07:00\". [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CapacityForecast
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['location_id'] = \
                location_id
            return self.call_with_http_info(**kwargs)

        self.get_capacity_forecast = _Endpoint(
            settings={
                'response_type': (CapacityForecast,),
                'auth': [],
                'endpoint_path': '/locations/{location_id}/capacity_forecasts',
                'operation_id': 'get_capacity_forecast',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'location_id',
                    'hours_to_forecast',
                    'timestamp',
                ],
                'required': [
                    'location_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'hours_to_forecast',
                ]
            },
            root_map={
                'validations': {
                    ('hours_to_forecast',): {

                        'inclusive_maximum': 24,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'location_id':
                        (str,),
                    'hours_to_forecast':
                        (int,),
                    'timestamp':
                        (str,),
                },
                'attribute_map': {
                    'location_id': 'location_id',
                    'hours_to_forecast': 'hours_to_forecast',
                    'timestamp': 'timestamp',
                },
                'location_map': {
                    'location_id': 'path',
                    'hours_to_forecast': 'query',
                    'timestamp': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_capacity_forecast
        )
