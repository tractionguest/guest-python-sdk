# coding: utf-8

"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.17.0
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from TractionGuest.configuration import Configuration


class NotificationTrigger(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'offset_direction': 'str',
        'offset_amount': 'int',
        'offset_origin': 'object',
        'email_template_id': 'int',
        'notification_groups': 'list[str]',
        'offset_unit': 'str',
        'email_template_name': 'str'
    }

    attribute_map = {
        'offset_direction': 'offset_direction',
        'offset_amount': 'offset_amount',
        'offset_origin': 'offset_origin',
        'email_template_id': 'email_template_id',
        'notification_groups': 'notification_groups',
        'offset_unit': 'offset_unit',
        'email_template_name': 'email_template_name'
    }

    def __init__(self, offset_direction=None, offset_amount=None, offset_origin=None, email_template_id=None, notification_groups=None, offset_unit=None, email_template_name=None, local_vars_configuration=None):  # noqa: E501
        """NotificationTrigger - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._offset_direction = None
        self._offset_amount = None
        self._offset_origin = None
        self._email_template_id = None
        self._notification_groups = None
        self._offset_unit = None
        self._email_template_name = None
        self.discriminator = None

        self.offset_direction = offset_direction
        self.offset_amount = offset_amount
        self.offset_origin = offset_origin
        self.email_template_id = email_template_id
        self.notification_groups = notification_groups
        self.offset_unit = offset_unit
        self.email_template_name = email_template_name

    @property
    def offset_direction(self):
        """Gets the offset_direction of this NotificationTrigger.  # noqa: E501

        Whether the offset should be calculated for before, or after the event  # noqa: E501

        :return: The offset_direction of this NotificationTrigger.  # noqa: E501
        :rtype: str
        """
        return self._offset_direction

    @offset_direction.setter
    def offset_direction(self, offset_direction):
        """Sets the offset_direction of this NotificationTrigger.

        Whether the offset should be calculated for before, or after the event  # noqa: E501

        :param offset_direction: The offset_direction of this NotificationTrigger.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and offset_direction is None:  # noqa: E501
            raise ValueError("Invalid value for `offset_direction`, must not be `None`")  # noqa: E501
        allowed_values = ["BEFORE", "AFTER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and offset_direction not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `offset_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(offset_direction, allowed_values)
            )

        self._offset_direction = offset_direction

    @property
    def offset_amount(self):
        """Gets the offset_amount of this NotificationTrigger.  # noqa: E501

        The amount to offset the notification from the event  # noqa: E501

        :return: The offset_amount of this NotificationTrigger.  # noqa: E501
        :rtype: int
        """
        return self._offset_amount

    @offset_amount.setter
    def offset_amount(self, offset_amount):
        """Sets the offset_amount of this NotificationTrigger.

        The amount to offset the notification from the event  # noqa: E501

        :param offset_amount: The offset_amount of this NotificationTrigger.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and offset_amount is None:  # noqa: E501
            raise ValueError("Invalid value for `offset_amount`, must not be `None`")  # noqa: E501

        self._offset_amount = offset_amount

    @property
    def offset_origin(self):
        """Gets the offset_origin of this NotificationTrigger.  # noqa: E501

        Whether the offset should be calculated from the start, or finish of the event  # noqa: E501

        :return: The offset_origin of this NotificationTrigger.  # noqa: E501
        :rtype: object
        """
        return self._offset_origin

    @offset_origin.setter
    def offset_origin(self, offset_origin):
        """Sets the offset_origin of this NotificationTrigger.

        Whether the offset should be calculated from the start, or finish of the event  # noqa: E501

        :param offset_origin: The offset_origin of this NotificationTrigger.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and offset_origin is None:  # noqa: E501
            raise ValueError("Invalid value for `offset_origin`, must not be `None`")  # noqa: E501
        allowed_values = [START, END]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and offset_origin not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `offset_origin` ({0}), must be one of {1}"  # noqa: E501
                .format(offset_origin, allowed_values)
            )

        self._offset_origin = offset_origin

    @property
    def email_template_id(self):
        """Gets the email_template_id of this NotificationTrigger.  # noqa: E501


        :return: The email_template_id of this NotificationTrigger.  # noqa: E501
        :rtype: int
        """
        return self._email_template_id

    @email_template_id.setter
    def email_template_id(self, email_template_id):
        """Sets the email_template_id of this NotificationTrigger.


        :param email_template_id: The email_template_id of this NotificationTrigger.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and email_template_id is None:  # noqa: E501
            raise ValueError("Invalid value for `email_template_id`, must not be `None`")  # noqa: E501

        self._email_template_id = email_template_id

    @property
    def notification_groups(self):
        """Gets the notification_groups of this NotificationTrigger.  # noqa: E501

        An array made of only `INVITEE`, `HOSTS, or `LEP` as possible string values  # noqa: E501

        :return: The notification_groups of this NotificationTrigger.  # noqa: E501
        :rtype: list[str]
        """
        return self._notification_groups

    @notification_groups.setter
    def notification_groups(self, notification_groups):
        """Sets the notification_groups of this NotificationTrigger.

        An array made of only `INVITEE`, `HOSTS, or `LEP` as possible string values  # noqa: E501

        :param notification_groups: The notification_groups of this NotificationTrigger.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and notification_groups is None:  # noqa: E501
            raise ValueError("Invalid value for `notification_groups`, must not be `None`")  # noqa: E501

        self._notification_groups = notification_groups

    @property
    def offset_unit(self):
        """Gets the offset_unit of this NotificationTrigger.  # noqa: E501

        Whether the offset should be calculated as `days` or `hours`  # noqa: E501

        :return: The offset_unit of this NotificationTrigger.  # noqa: E501
        :rtype: str
        """
        return self._offset_unit

    @offset_unit.setter
    def offset_unit(self, offset_unit):
        """Sets the offset_unit of this NotificationTrigger.

        Whether the offset should be calculated as `days` or `hours`  # noqa: E501

        :param offset_unit: The offset_unit of this NotificationTrigger.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and offset_unit is None:  # noqa: E501
            raise ValueError("Invalid value for `offset_unit`, must not be `None`")  # noqa: E501
        allowed_values = ["days", "hours"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and offset_unit not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `offset_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(offset_unit, allowed_values)
            )

        self._offset_unit = offset_unit

    @property
    def email_template_name(self):
        """Gets the email_template_name of this NotificationTrigger.  # noqa: E501

        The name of the EmailTemplate associated with the NotificationTrigger. This is only given from the server, not used as a create param.  # noqa: E501

        :return: The email_template_name of this NotificationTrigger.  # noqa: E501
        :rtype: str
        """
        return self._email_template_name

    @email_template_name.setter
    def email_template_name(self, email_template_name):
        """Sets the email_template_name of this NotificationTrigger.

        The name of the EmailTemplate associated with the NotificationTrigger. This is only given from the server, not used as a create param.  # noqa: E501

        :param email_template_name: The email_template_name of this NotificationTrigger.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email_template_name is None:  # noqa: E501
            raise ValueError("Invalid value for `email_template_name`, must not be `None`")  # noqa: E501

        self._email_template_name = email_template_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationTrigger):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotificationTrigger):
            return True

        return self.to_dict() != other.to_dict()
