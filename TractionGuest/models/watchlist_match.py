# coding: utf-8

"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.16.0
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from TractionGuest.configuration import Configuration


class WatchlistMatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'alt_names': 'list[str]',
        'federal_register_notice': 'str',
        'name': 'str',
        'source_information_url': 'str',
        'source_list_url': 'str',
        'list': 'str',
        'type': 'str',
        'category': 'str',
        'street1': 'str',
        'street2': 'str',
        'city': 'str',
        'state': 'str',
        'country': 'str',
        'notes': 'str',
        'frc': 'str',
        'start': 'str',
        'end': 'str',
        'frserve': 'str',
        'optional_id': 'str',
        'alert_type': 'str',
        'pair_status': 'str',
        'pair_reason': 'str',
        'pair_comments': 'str',
        'application_display_name': 'str',
        'application_id': 'str',
        'client_id': 'str',
        'client_key': 'str',
        'client_full_name': 'str',
        'list_key': 'str',
        'list_name': 'str',
        'list_id': 'str',
        'list_version': 'str',
        'list_modify_date': 'str',
        'list_profile_id': 'str',
        'list_profile_key': 'str',
        'link_single_string_name': 'str',
        'list_parent_single_string_name': 'str',
        'list_category': 'str',
        'list_pep_category': 'str',
        'list_do_bs': 'str',
        'list_countries': 'str',
        'rank_string': 'str',
        'ranktype': 'str',
        'rankweight': 'str',
        'pair_load_date': 'str',
        'e_address_to': 'str',
        'e_address_cc': 'str',
        'origin': 'str',
        'secondsviewed': 'str',
        'initial_user': 'str',
        'is_pair_parent_flag': 'str',
        'pair_met_search_criteria_flag': 'str',
        'editable_due_to_assignment_flag': 'str',
        'modify_date': 'str',
        'modified_by_user': 'str',
        'pair_report_type': 'str',
        'finscan_category': 'str',
        'wrapper_status': 'str',
        'source_lists': 'str'
    }

    attribute_map = {
        'id': 'id',
        'alt_names': 'alt_names',
        'federal_register_notice': 'federal_register_notice',
        'name': 'name',
        'source_information_url': 'source_information_url',
        'source_list_url': 'source_list_url',
        'list': 'list',
        'type': 'type',
        'category': 'category',
        'street1': 'street1',
        'street2': 'street2',
        'city': 'city',
        'state': 'state',
        'country': 'country',
        'notes': 'notes',
        'frc': 'frc',
        'start': 'start',
        'end': 'end',
        'frserve': 'frserve',
        'optional_id': 'optional_ID',
        'alert_type': 'alert_type',
        'pair_status': 'pair_status',
        'pair_reason': 'pair_reason',
        'pair_comments': 'pair_comments',
        'application_display_name': 'application_display_name',
        'application_id': 'application_id',
        'client_id': 'client_id',
        'client_key': 'client_key',
        'client_full_name': 'client_full_name',
        'list_key': 'list_key',
        'list_name': 'list_name',
        'list_id': 'list_id',
        'list_version': 'list_version',
        'list_modify_date': 'list_modify_date',
        'list_profile_id': 'list_profile_id',
        'list_profile_key': 'list_profile_key',
        'link_single_string_name': 'link_single_string_name',
        'list_parent_single_string_name': 'list_parent_single_string_name',
        'list_category': 'list_category',
        'list_pep_category': 'list_pep_category',
        'list_do_bs': 'list_do_bs',
        'list_countries': 'list_countries',
        'rank_string': 'rank_string',
        'ranktype': 'ranktype',
        'rankweight': 'rankweight',
        'pair_load_date': 'pair_load_date',
        'e_address_to': 'e_address_to',
        'e_address_cc': 'e_address_cc',
        'origin': 'origin',
        'secondsviewed': 'secondsviewed',
        'initial_user': 'initial_user',
        'is_pair_parent_flag': 'is_pair_parent_flag',
        'pair_met_search_criteria_flag': 'pair_met_search_criteria_flag',
        'editable_due_to_assignment_flag': 'editable_due_to_assignment_flag',
        'modify_date': 'modify_date',
        'modified_by_user': 'modified_by_user',
        'pair_report_type': 'pair_report_type',
        'finscan_category': 'finscan_category',
        'wrapper_status': 'wrapper_status',
        'source_lists': 'source_lists'
    }

    def __init__(self, id=None, alt_names=None, federal_register_notice=None, name=None, source_information_url=None, source_list_url=None, list=None, type=None, category=None, street1=None, street2=None, city=None, state=None, country=None, notes=None, frc=None, start=None, end=None, frserve=None, optional_id=None, alert_type=None, pair_status=None, pair_reason=None, pair_comments=None, application_display_name=None, application_id=None, client_id=None, client_key=None, client_full_name=None, list_key=None, list_name=None, list_id=None, list_version=None, list_modify_date=None, list_profile_id=None, list_profile_key=None, link_single_string_name=None, list_parent_single_string_name=None, list_category=None, list_pep_category=None, list_do_bs=None, list_countries=None, rank_string=None, ranktype=None, rankweight=None, pair_load_date=None, e_address_to=None, e_address_cc=None, origin=None, secondsviewed=None, initial_user=None, is_pair_parent_flag=None, pair_met_search_criteria_flag=None, editable_due_to_assignment_flag=None, modify_date=None, modified_by_user=None, pair_report_type=None, finscan_category=None, wrapper_status=None, source_lists=None, local_vars_configuration=None):  # noqa: E501
        """WatchlistMatch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._alt_names = None
        self._federal_register_notice = None
        self._name = None
        self._source_information_url = None
        self._source_list_url = None
        self._list = None
        self._type = None
        self._category = None
        self._street1 = None
        self._street2 = None
        self._city = None
        self._state = None
        self._country = None
        self._notes = None
        self._frc = None
        self._start = None
        self._end = None
        self._frserve = None
        self._optional_id = None
        self._alert_type = None
        self._pair_status = None
        self._pair_reason = None
        self._pair_comments = None
        self._application_display_name = None
        self._application_id = None
        self._client_id = None
        self._client_key = None
        self._client_full_name = None
        self._list_key = None
        self._list_name = None
        self._list_id = None
        self._list_version = None
        self._list_modify_date = None
        self._list_profile_id = None
        self._list_profile_key = None
        self._link_single_string_name = None
        self._list_parent_single_string_name = None
        self._list_category = None
        self._list_pep_category = None
        self._list_do_bs = None
        self._list_countries = None
        self._rank_string = None
        self._ranktype = None
        self._rankweight = None
        self._pair_load_date = None
        self._e_address_to = None
        self._e_address_cc = None
        self._origin = None
        self._secondsviewed = None
        self._initial_user = None
        self._is_pair_parent_flag = None
        self._pair_met_search_criteria_flag = None
        self._editable_due_to_assignment_flag = None
        self._modify_date = None
        self._modified_by_user = None
        self._pair_report_type = None
        self._finscan_category = None
        self._wrapper_status = None
        self._source_lists = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if alt_names is not None:
            self.alt_names = alt_names
        if federal_register_notice is not None:
            self.federal_register_notice = federal_register_notice
        self.name = name
        if source_information_url is not None:
            self.source_information_url = source_information_url
        if source_list_url is not None:
            self.source_list_url = source_list_url
        self.list = list
        if type is not None:
            self.type = type
        if category is not None:
            self.category = category
        if street1 is not None:
            self.street1 = street1
        if street2 is not None:
            self.street2 = street2
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if notes is not None:
            self.notes = notes
        if frc is not None:
            self.frc = frc
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if frserve is not None:
            self.frserve = frserve
        if optional_id is not None:
            self.optional_id = optional_id
        if alert_type is not None:
            self.alert_type = alert_type
        if pair_status is not None:
            self.pair_status = pair_status
        if pair_reason is not None:
            self.pair_reason = pair_reason
        if pair_comments is not None:
            self.pair_comments = pair_comments
        if application_display_name is not None:
            self.application_display_name = application_display_name
        if application_id is not None:
            self.application_id = application_id
        if client_id is not None:
            self.client_id = client_id
        if client_key is not None:
            self.client_key = client_key
        if client_full_name is not None:
            self.client_full_name = client_full_name
        if list_key is not None:
            self.list_key = list_key
        if list_name is not None:
            self.list_name = list_name
        if list_id is not None:
            self.list_id = list_id
        if list_version is not None:
            self.list_version = list_version
        if list_modify_date is not None:
            self.list_modify_date = list_modify_date
        if list_profile_id is not None:
            self.list_profile_id = list_profile_id
        if list_profile_key is not None:
            self.list_profile_key = list_profile_key
        if link_single_string_name is not None:
            self.link_single_string_name = link_single_string_name
        if list_parent_single_string_name is not None:
            self.list_parent_single_string_name = list_parent_single_string_name
        if list_category is not None:
            self.list_category = list_category
        if list_pep_category is not None:
            self.list_pep_category = list_pep_category
        if list_do_bs is not None:
            self.list_do_bs = list_do_bs
        if list_countries is not None:
            self.list_countries = list_countries
        if rank_string is not None:
            self.rank_string = rank_string
        if ranktype is not None:
            self.ranktype = ranktype
        if rankweight is not None:
            self.rankweight = rankweight
        if pair_load_date is not None:
            self.pair_load_date = pair_load_date
        if e_address_to is not None:
            self.e_address_to = e_address_to
        if e_address_cc is not None:
            self.e_address_cc = e_address_cc
        if origin is not None:
            self.origin = origin
        if secondsviewed is not None:
            self.secondsviewed = secondsviewed
        if initial_user is not None:
            self.initial_user = initial_user
        if is_pair_parent_flag is not None:
            self.is_pair_parent_flag = is_pair_parent_flag
        if pair_met_search_criteria_flag is not None:
            self.pair_met_search_criteria_flag = pair_met_search_criteria_flag
        if editable_due_to_assignment_flag is not None:
            self.editable_due_to_assignment_flag = editable_due_to_assignment_flag
        if modify_date is not None:
            self.modify_date = modify_date
        if modified_by_user is not None:
            self.modified_by_user = modified_by_user
        if pair_report_type is not None:
            self.pair_report_type = pair_report_type
        if finscan_category is not None:
            self.finscan_category = finscan_category
        if wrapper_status is not None:
            self.wrapper_status = wrapper_status
        if source_lists is not None:
            self.source_lists = source_lists

    @property
    def id(self):
        """Gets the id of this WatchlistMatch.  # noqa: E501


        :return: The id of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WatchlistMatch.


        :param id: The id of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def alt_names(self):
        """Gets the alt_names of this WatchlistMatch.  # noqa: E501


        :return: The alt_names of this WatchlistMatch.  # noqa: E501
        :rtype: list[str]
        """
        return self._alt_names

    @alt_names.setter
    def alt_names(self, alt_names):
        """Sets the alt_names of this WatchlistMatch.


        :param alt_names: The alt_names of this WatchlistMatch.  # noqa: E501
        :type: list[str]
        """

        self._alt_names = alt_names

    @property
    def federal_register_notice(self):
        """Gets the federal_register_notice of this WatchlistMatch.  # noqa: E501


        :return: The federal_register_notice of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._federal_register_notice

    @federal_register_notice.setter
    def federal_register_notice(self, federal_register_notice):
        """Sets the federal_register_notice of this WatchlistMatch.


        :param federal_register_notice: The federal_register_notice of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._federal_register_notice = federal_register_notice

    @property
    def name(self):
        """Gets the name of this WatchlistMatch.  # noqa: E501


        :return: The name of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WatchlistMatch.


        :param name: The name of this WatchlistMatch.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def source_information_url(self):
        """Gets the source_information_url of this WatchlistMatch.  # noqa: E501


        :return: The source_information_url of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._source_information_url

    @source_information_url.setter
    def source_information_url(self, source_information_url):
        """Sets the source_information_url of this WatchlistMatch.


        :param source_information_url: The source_information_url of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._source_information_url = source_information_url

    @property
    def source_list_url(self):
        """Gets the source_list_url of this WatchlistMatch.  # noqa: E501


        :return: The source_list_url of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._source_list_url

    @source_list_url.setter
    def source_list_url(self, source_list_url):
        """Sets the source_list_url of this WatchlistMatch.


        :param source_list_url: The source_list_url of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._source_list_url = source_list_url

    @property
    def list(self):
        """Gets the list of this WatchlistMatch.  # noqa: E501


        :return: The list of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this WatchlistMatch.


        :param list: The list of this WatchlistMatch.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and list is None:  # noqa: E501
            raise ValueError("Invalid value for `list`, must not be `None`")  # noqa: E501

        self._list = list

    @property
    def type(self):
        """Gets the type of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The type of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WatchlistMatch.

          # noqa: E501

        :param type: The type of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def category(self):
        """Gets the category of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The category of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this WatchlistMatch.

          # noqa: E501

        :param category: The category of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def street1(self):
        """Gets the street1 of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The street1 of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """Sets the street1 of this WatchlistMatch.

          # noqa: E501

        :param street1: The street1 of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._street1 = street1

    @property
    def street2(self):
        """Gets the street2 of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The street2 of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this WatchlistMatch.

          # noqa: E501

        :param street2: The street2 of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._street2 = street2

    @property
    def city(self):
        """Gets the city of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The city of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this WatchlistMatch.

          # noqa: E501

        :param city: The city of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The state of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WatchlistMatch.

          # noqa: E501

        :param state: The state of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The country of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this WatchlistMatch.

          # noqa: E501

        :param country: The country of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def notes(self):
        """Gets the notes of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The notes of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this WatchlistMatch.

          # noqa: E501

        :param notes: The notes of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def frc(self):
        """Gets the frc of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The frc of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._frc

    @frc.setter
    def frc(self, frc):
        """Sets the frc of this WatchlistMatch.

          # noqa: E501

        :param frc: The frc of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._frc = frc

    @property
    def start(self):
        """Gets the start of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The start of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this WatchlistMatch.

          # noqa: E501

        :param start: The start of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The end of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this WatchlistMatch.

          # noqa: E501

        :param end: The end of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def frserve(self):
        """Gets the frserve of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The frserve of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._frserve

    @frserve.setter
    def frserve(self, frserve):
        """Sets the frserve of this WatchlistMatch.

          # noqa: E501

        :param frserve: The frserve of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._frserve = frserve

    @property
    def optional_id(self):
        """Gets the optional_id of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The optional_id of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._optional_id

    @optional_id.setter
    def optional_id(self, optional_id):
        """Sets the optional_id of this WatchlistMatch.

          # noqa: E501

        :param optional_id: The optional_id of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._optional_id = optional_id

    @property
    def alert_type(self):
        """Gets the alert_type of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The alert_type of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type):
        """Sets the alert_type of this WatchlistMatch.

          # noqa: E501

        :param alert_type: The alert_type of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._alert_type = alert_type

    @property
    def pair_status(self):
        """Gets the pair_status of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The pair_status of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._pair_status

    @pair_status.setter
    def pair_status(self, pair_status):
        """Sets the pair_status of this WatchlistMatch.

          # noqa: E501

        :param pair_status: The pair_status of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._pair_status = pair_status

    @property
    def pair_reason(self):
        """Gets the pair_reason of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The pair_reason of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._pair_reason

    @pair_reason.setter
    def pair_reason(self, pair_reason):
        """Sets the pair_reason of this WatchlistMatch.

          # noqa: E501

        :param pair_reason: The pair_reason of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._pair_reason = pair_reason

    @property
    def pair_comments(self):
        """Gets the pair_comments of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The pair_comments of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._pair_comments

    @pair_comments.setter
    def pair_comments(self, pair_comments):
        """Sets the pair_comments of this WatchlistMatch.

          # noqa: E501

        :param pair_comments: The pair_comments of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._pair_comments = pair_comments

    @property
    def application_display_name(self):
        """Gets the application_display_name of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The application_display_name of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._application_display_name

    @application_display_name.setter
    def application_display_name(self, application_display_name):
        """Sets the application_display_name of this WatchlistMatch.

          # noqa: E501

        :param application_display_name: The application_display_name of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._application_display_name = application_display_name

    @property
    def application_id(self):
        """Gets the application_id of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The application_id of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this WatchlistMatch.

          # noqa: E501

        :param application_id: The application_id of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def client_id(self):
        """Gets the client_id of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The client_id of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this WatchlistMatch.

          # noqa: E501

        :param client_id: The client_id of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_key(self):
        """Gets the client_key of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The client_key of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this WatchlistMatch.

          # noqa: E501

        :param client_key: The client_key of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._client_key = client_key

    @property
    def client_full_name(self):
        """Gets the client_full_name of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The client_full_name of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._client_full_name

    @client_full_name.setter
    def client_full_name(self, client_full_name):
        """Sets the client_full_name of this WatchlistMatch.

          # noqa: E501

        :param client_full_name: The client_full_name of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._client_full_name = client_full_name

    @property
    def list_key(self):
        """Gets the list_key of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The list_key of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list_key

    @list_key.setter
    def list_key(self, list_key):
        """Sets the list_key of this WatchlistMatch.

          # noqa: E501

        :param list_key: The list_key of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._list_key = list_key

    @property
    def list_name(self):
        """Gets the list_name of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The list_name of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list_name

    @list_name.setter
    def list_name(self, list_name):
        """Sets the list_name of this WatchlistMatch.

          # noqa: E501

        :param list_name: The list_name of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._list_name = list_name

    @property
    def list_id(self):
        """Gets the list_id of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The list_id of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this WatchlistMatch.

          # noqa: E501

        :param list_id: The list_id of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._list_id = list_id

    @property
    def list_version(self):
        """Gets the list_version of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The list_version of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list_version

    @list_version.setter
    def list_version(self, list_version):
        """Sets the list_version of this WatchlistMatch.

          # noqa: E501

        :param list_version: The list_version of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._list_version = list_version

    @property
    def list_modify_date(self):
        """Gets the list_modify_date of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The list_modify_date of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list_modify_date

    @list_modify_date.setter
    def list_modify_date(self, list_modify_date):
        """Sets the list_modify_date of this WatchlistMatch.

          # noqa: E501

        :param list_modify_date: The list_modify_date of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._list_modify_date = list_modify_date

    @property
    def list_profile_id(self):
        """Gets the list_profile_id of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The list_profile_id of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list_profile_id

    @list_profile_id.setter
    def list_profile_id(self, list_profile_id):
        """Sets the list_profile_id of this WatchlistMatch.

          # noqa: E501

        :param list_profile_id: The list_profile_id of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._list_profile_id = list_profile_id

    @property
    def list_profile_key(self):
        """Gets the list_profile_key of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The list_profile_key of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list_profile_key

    @list_profile_key.setter
    def list_profile_key(self, list_profile_key):
        """Sets the list_profile_key of this WatchlistMatch.

          # noqa: E501

        :param list_profile_key: The list_profile_key of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._list_profile_key = list_profile_key

    @property
    def link_single_string_name(self):
        """Gets the link_single_string_name of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The link_single_string_name of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._link_single_string_name

    @link_single_string_name.setter
    def link_single_string_name(self, link_single_string_name):
        """Sets the link_single_string_name of this WatchlistMatch.

          # noqa: E501

        :param link_single_string_name: The link_single_string_name of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._link_single_string_name = link_single_string_name

    @property
    def list_parent_single_string_name(self):
        """Gets the list_parent_single_string_name of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The list_parent_single_string_name of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list_parent_single_string_name

    @list_parent_single_string_name.setter
    def list_parent_single_string_name(self, list_parent_single_string_name):
        """Sets the list_parent_single_string_name of this WatchlistMatch.

          # noqa: E501

        :param list_parent_single_string_name: The list_parent_single_string_name of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._list_parent_single_string_name = list_parent_single_string_name

    @property
    def list_category(self):
        """Gets the list_category of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The list_category of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list_category

    @list_category.setter
    def list_category(self, list_category):
        """Sets the list_category of this WatchlistMatch.

          # noqa: E501

        :param list_category: The list_category of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._list_category = list_category

    @property
    def list_pep_category(self):
        """Gets the list_pep_category of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The list_pep_category of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list_pep_category

    @list_pep_category.setter
    def list_pep_category(self, list_pep_category):
        """Sets the list_pep_category of this WatchlistMatch.

          # noqa: E501

        :param list_pep_category: The list_pep_category of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._list_pep_category = list_pep_category

    @property
    def list_do_bs(self):
        """Gets the list_do_bs of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The list_do_bs of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list_do_bs

    @list_do_bs.setter
    def list_do_bs(self, list_do_bs):
        """Sets the list_do_bs of this WatchlistMatch.

          # noqa: E501

        :param list_do_bs: The list_do_bs of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._list_do_bs = list_do_bs

    @property
    def list_countries(self):
        """Gets the list_countries of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The list_countries of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._list_countries

    @list_countries.setter
    def list_countries(self, list_countries):
        """Sets the list_countries of this WatchlistMatch.

          # noqa: E501

        :param list_countries: The list_countries of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._list_countries = list_countries

    @property
    def rank_string(self):
        """Gets the rank_string of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The rank_string of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._rank_string

    @rank_string.setter
    def rank_string(self, rank_string):
        """Sets the rank_string of this WatchlistMatch.

          # noqa: E501

        :param rank_string: The rank_string of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._rank_string = rank_string

    @property
    def ranktype(self):
        """Gets the ranktype of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The ranktype of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._ranktype

    @ranktype.setter
    def ranktype(self, ranktype):
        """Sets the ranktype of this WatchlistMatch.

          # noqa: E501

        :param ranktype: The ranktype of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._ranktype = ranktype

    @property
    def rankweight(self):
        """Gets the rankweight of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The rankweight of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._rankweight

    @rankweight.setter
    def rankweight(self, rankweight):
        """Sets the rankweight of this WatchlistMatch.

          # noqa: E501

        :param rankweight: The rankweight of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._rankweight = rankweight

    @property
    def pair_load_date(self):
        """Gets the pair_load_date of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The pair_load_date of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._pair_load_date

    @pair_load_date.setter
    def pair_load_date(self, pair_load_date):
        """Sets the pair_load_date of this WatchlistMatch.

          # noqa: E501

        :param pair_load_date: The pair_load_date of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._pair_load_date = pair_load_date

    @property
    def e_address_to(self):
        """Gets the e_address_to of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The e_address_to of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._e_address_to

    @e_address_to.setter
    def e_address_to(self, e_address_to):
        """Sets the e_address_to of this WatchlistMatch.

          # noqa: E501

        :param e_address_to: The e_address_to of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._e_address_to = e_address_to

    @property
    def e_address_cc(self):
        """Gets the e_address_cc of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The e_address_cc of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._e_address_cc

    @e_address_cc.setter
    def e_address_cc(self, e_address_cc):
        """Sets the e_address_cc of this WatchlistMatch.

          # noqa: E501

        :param e_address_cc: The e_address_cc of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._e_address_cc = e_address_cc

    @property
    def origin(self):
        """Gets the origin of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The origin of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this WatchlistMatch.

          # noqa: E501

        :param origin: The origin of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def secondsviewed(self):
        """Gets the secondsviewed of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The secondsviewed of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._secondsviewed

    @secondsviewed.setter
    def secondsviewed(self, secondsviewed):
        """Sets the secondsviewed of this WatchlistMatch.

          # noqa: E501

        :param secondsviewed: The secondsviewed of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._secondsviewed = secondsviewed

    @property
    def initial_user(self):
        """Gets the initial_user of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The initial_user of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._initial_user

    @initial_user.setter
    def initial_user(self, initial_user):
        """Sets the initial_user of this WatchlistMatch.

          # noqa: E501

        :param initial_user: The initial_user of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._initial_user = initial_user

    @property
    def is_pair_parent_flag(self):
        """Gets the is_pair_parent_flag of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The is_pair_parent_flag of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._is_pair_parent_flag

    @is_pair_parent_flag.setter
    def is_pair_parent_flag(self, is_pair_parent_flag):
        """Sets the is_pair_parent_flag of this WatchlistMatch.

          # noqa: E501

        :param is_pair_parent_flag: The is_pair_parent_flag of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._is_pair_parent_flag = is_pair_parent_flag

    @property
    def pair_met_search_criteria_flag(self):
        """Gets the pair_met_search_criteria_flag of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The pair_met_search_criteria_flag of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._pair_met_search_criteria_flag

    @pair_met_search_criteria_flag.setter
    def pair_met_search_criteria_flag(self, pair_met_search_criteria_flag):
        """Sets the pair_met_search_criteria_flag of this WatchlistMatch.

          # noqa: E501

        :param pair_met_search_criteria_flag: The pair_met_search_criteria_flag of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._pair_met_search_criteria_flag = pair_met_search_criteria_flag

    @property
    def editable_due_to_assignment_flag(self):
        """Gets the editable_due_to_assignment_flag of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The editable_due_to_assignment_flag of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._editable_due_to_assignment_flag

    @editable_due_to_assignment_flag.setter
    def editable_due_to_assignment_flag(self, editable_due_to_assignment_flag):
        """Sets the editable_due_to_assignment_flag of this WatchlistMatch.

          # noqa: E501

        :param editable_due_to_assignment_flag: The editable_due_to_assignment_flag of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._editable_due_to_assignment_flag = editable_due_to_assignment_flag

    @property
    def modify_date(self):
        """Gets the modify_date of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The modify_date of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this WatchlistMatch.

          # noqa: E501

        :param modify_date: The modify_date of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._modify_date = modify_date

    @property
    def modified_by_user(self):
        """Gets the modified_by_user of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The modified_by_user of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._modified_by_user

    @modified_by_user.setter
    def modified_by_user(self, modified_by_user):
        """Sets the modified_by_user of this WatchlistMatch.

          # noqa: E501

        :param modified_by_user: The modified_by_user of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._modified_by_user = modified_by_user

    @property
    def pair_report_type(self):
        """Gets the pair_report_type of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The pair_report_type of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._pair_report_type

    @pair_report_type.setter
    def pair_report_type(self, pair_report_type):
        """Sets the pair_report_type of this WatchlistMatch.

          # noqa: E501

        :param pair_report_type: The pair_report_type of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._pair_report_type = pair_report_type

    @property
    def finscan_category(self):
        """Gets the finscan_category of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The finscan_category of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._finscan_category

    @finscan_category.setter
    def finscan_category(self, finscan_category):
        """Sets the finscan_category of this WatchlistMatch.

          # noqa: E501

        :param finscan_category: The finscan_category of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._finscan_category = finscan_category

    @property
    def wrapper_status(self):
        """Gets the wrapper_status of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The wrapper_status of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._wrapper_status

    @wrapper_status.setter
    def wrapper_status(self, wrapper_status):
        """Sets the wrapper_status of this WatchlistMatch.

          # noqa: E501

        :param wrapper_status: The wrapper_status of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._wrapper_status = wrapper_status

    @property
    def source_lists(self):
        """Gets the source_lists of this WatchlistMatch.  # noqa: E501

          # noqa: E501

        :return: The source_lists of this WatchlistMatch.  # noqa: E501
        :rtype: str
        """
        return self._source_lists

    @source_lists.setter
    def source_lists(self, source_lists):
        """Sets the source_lists of this WatchlistMatch.

          # noqa: E501

        :param source_lists: The source_lists of this WatchlistMatch.  # noqa: E501
        :type: str
        """

        self._source_lists = source_lists

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WatchlistMatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WatchlistMatch):
            return True

        return self.to_dict() != other.to_dict()
