# coding: utf-8

"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from TractionGuest.configuration import Configuration


class SigninCreateParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'registration_id': 'str',
        'email': 'str',
        'company': 'str',
        'last_name': 'str',
        'first_name': 'str',
        'sms_message': 'str',
        'send_notifications': 'bool',
        'location_id': 'int',
        'host_ids': 'list[int]',
        'host_email_template_id': 'int',
        'guest_email_template_id': 'int'
    }

    attribute_map = {
        'registration_id': 'registration_id',
        'email': 'email',
        'company': 'company',
        'last_name': 'last_name',
        'first_name': 'first_name',
        'sms_message': 'sms_message',
        'send_notifications': 'send_notifications',
        'location_id': 'location_id',
        'host_ids': 'host_ids',
        'host_email_template_id': 'host_email_template_id',
        'guest_email_template_id': 'guest_email_template_id'
    }

    def __init__(self, registration_id=None, email=None, company=None, last_name=None, first_name=None, sms_message=None, send_notifications=None, location_id=None, host_ids=None, host_email_template_id=None, guest_email_template_id=None, local_vars_configuration=None):  # noqa: E501
        """SigninCreateParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._registration_id = None
        self._email = None
        self._company = None
        self._last_name = None
        self._first_name = None
        self._sms_message = None
        self._send_notifications = None
        self._location_id = None
        self._host_ids = None
        self._host_email_template_id = None
        self._guest_email_template_id = None
        self.discriminator = None

        if registration_id is not None:
            self.registration_id = registration_id
        if email is not None:
            self.email = email
        if company is not None:
            self.company = company
        if last_name is not None:
            self.last_name = last_name
        if first_name is not None:
            self.first_name = first_name
        if sms_message is not None:
            self.sms_message = sms_message
        if send_notifications is not None:
            self.send_notifications = send_notifications
        if location_id is not None:
            self.location_id = location_id
        if host_ids is not None:
            self.host_ids = host_ids
        if host_email_template_id is not None:
            self.host_email_template_id = host_email_template_id
        if guest_email_template_id is not None:
            self.guest_email_template_id = guest_email_template_id

    @property
    def registration_id(self):
        """Gets the registration_id of this SigninCreateParams.  # noqa: E501

        UUID of a Registration  # noqa: E501

        :return: The registration_id of this SigninCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this SigninCreateParams.

        UUID of a Registration  # noqa: E501

        :param registration_id: The registration_id of this SigninCreateParams.  # noqa: E501
        :type: str
        """

        self._registration_id = registration_id

    @property
    def email(self):
        """Gets the email of this SigninCreateParams.  # noqa: E501

        E-mail, ignored if `registration_id` is included  # noqa: E501

        :return: The email of this SigninCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SigninCreateParams.

        E-mail, ignored if `registration_id` is included  # noqa: E501

        :param email: The email of this SigninCreateParams.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def company(self):
        """Gets the company of this SigninCreateParams.  # noqa: E501

        Company name, ignored if `registration_id` is included  # noqa: E501

        :return: The company of this SigninCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this SigninCreateParams.

        Company name, ignored if `registration_id` is included  # noqa: E501

        :param company: The company of this SigninCreateParams.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def last_name(self):
        """Gets the last_name of this SigninCreateParams.  # noqa: E501

        Last name, ignored if `registration_id` is included  # noqa: E501

        :return: The last_name of this SigninCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SigninCreateParams.

        Last name, ignored if `registration_id` is included  # noqa: E501

        :param last_name: The last_name of this SigninCreateParams.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def first_name(self):
        """Gets the first_name of this SigninCreateParams.  # noqa: E501

        First name, ignored if `registration_id` is included  # noqa: E501

        :return: The first_name of this SigninCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SigninCreateParams.

        First name, ignored if `registration_id` is included  # noqa: E501

        :param first_name: The first_name of this SigninCreateParams.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def sms_message(self):
        """Gets the sms_message of this SigninCreateParams.  # noqa: E501


        :return: The sms_message of this SigninCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._sms_message

    @sms_message.setter
    def sms_message(self, sms_message):
        """Sets the sms_message of this SigninCreateParams.


        :param sms_message: The sms_message of this SigninCreateParams.  # noqa: E501
        :type: str
        """

        self._sms_message = sms_message

    @property
    def send_notifications(self):
        """Gets the send_notifications of this SigninCreateParams.  # noqa: E501


        :return: The send_notifications of this SigninCreateParams.  # noqa: E501
        :rtype: bool
        """
        return self._send_notifications

    @send_notifications.setter
    def send_notifications(self, send_notifications):
        """Sets the send_notifications of this SigninCreateParams.


        :param send_notifications: The send_notifications of this SigninCreateParams.  # noqa: E501
        :type: bool
        """

        self._send_notifications = send_notifications

    @property
    def location_id(self):
        """Gets the location_id of this SigninCreateParams.  # noqa: E501

        ID of the Location where the Signin happened, ignored if `registration_id` is included  # noqa: E501

        :return: The location_id of this SigninCreateParams.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this SigninCreateParams.

        ID of the Location where the Signin happened, ignored if `registration_id` is included  # noqa: E501

        :param location_id: The location_id of this SigninCreateParams.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def host_ids(self):
        """Gets the host_ids of this SigninCreateParams.  # noqa: E501

        Array of Host ids, ignored if `registration_id` is included  # noqa: E501

        :return: The host_ids of this SigninCreateParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._host_ids

    @host_ids.setter
    def host_ids(self, host_ids):
        """Sets the host_ids of this SigninCreateParams.

        Array of Host ids, ignored if `registration_id` is included  # noqa: E501

        :param host_ids: The host_ids of this SigninCreateParams.  # noqa: E501
        :type: list[int]
        """

        self._host_ids = host_ids

    @property
    def host_email_template_id(self):
        """Gets the host_email_template_id of this SigninCreateParams.  # noqa: E501


        :return: The host_email_template_id of this SigninCreateParams.  # noqa: E501
        :rtype: int
        """
        return self._host_email_template_id

    @host_email_template_id.setter
    def host_email_template_id(self, host_email_template_id):
        """Sets the host_email_template_id of this SigninCreateParams.


        :param host_email_template_id: The host_email_template_id of this SigninCreateParams.  # noqa: E501
        :type: int
        """

        self._host_email_template_id = host_email_template_id

    @property
    def guest_email_template_id(self):
        """Gets the guest_email_template_id of this SigninCreateParams.  # noqa: E501


        :return: The guest_email_template_id of this SigninCreateParams.  # noqa: E501
        :rtype: int
        """
        return self._guest_email_template_id

    @guest_email_template_id.setter
    def guest_email_template_id(self, guest_email_template_id):
        """Sets the guest_email_template_id of this SigninCreateParams.


        :param guest_email_template_id: The guest_email_template_id of this SigninCreateParams.  # noqa: E501
        :type: int
        """

        self._guest_email_template_id = guest_email_template_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SigninCreateParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SigninCreateParams):
            return True

        return self.to_dict() != other.to_dict()
