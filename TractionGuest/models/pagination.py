# coding: utf-8

"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from TractionGuest.configuration import Configuration


class Pagination(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total_records': 'int',
        'current_offset': 'int',
        'next_offset': 'int',
        'last_id': 'int',
        'limit': 'int'
    }

    attribute_map = {
        'total_records': 'total_records',
        'current_offset': 'current_offset',
        'next_offset': 'next_offset',
        'last_id': 'last_id',
        'limit': 'limit'
    }

    def __init__(self, total_records=None, current_offset=None, next_offset=None, last_id=None, limit=None, local_vars_configuration=None):  # noqa: E501
        """Pagination - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total_records = None
        self._current_offset = None
        self._next_offset = None
        self._last_id = None
        self._limit = None
        self.discriminator = None

        if total_records is not None:
            self.total_records = total_records
        if current_offset is not None:
            self.current_offset = current_offset
        self.next_offset = next_offset
        self.last_id = last_id
        if limit is not None:
            self.limit = limit

    @property
    def total_records(self):
        """Gets the total_records of this Pagination.  # noqa: E501


        :return: The total_records of this Pagination.  # noqa: E501
        :rtype: int
        """
        return self._total_records

    @total_records.setter
    def total_records(self, total_records):
        """Sets the total_records of this Pagination.


        :param total_records: The total_records of this Pagination.  # noqa: E501
        :type: int
        """

        self._total_records = total_records

    @property
    def current_offset(self):
        """Gets the current_offset of this Pagination.  # noqa: E501


        :return: The current_offset of this Pagination.  # noqa: E501
        :rtype: int
        """
        return self._current_offset

    @current_offset.setter
    def current_offset(self, current_offset):
        """Sets the current_offset of this Pagination.


        :param current_offset: The current_offset of this Pagination.  # noqa: E501
        :type: int
        """

        self._current_offset = current_offset

    @property
    def next_offset(self):
        """Gets the next_offset of this Pagination.  # noqa: E501


        :return: The next_offset of this Pagination.  # noqa: E501
        :rtype: int
        """
        return self._next_offset

    @next_offset.setter
    def next_offset(self, next_offset):
        """Sets the next_offset of this Pagination.


        :param next_offset: The next_offset of this Pagination.  # noqa: E501
        :type: int
        """

        self._next_offset = next_offset

    @property
    def last_id(self):
        """Gets the last_id of this Pagination.  # noqa: E501

        The last ID rendered, if the request included the 'after_id' param.  # noqa: E501

        :return: The last_id of this Pagination.  # noqa: E501
        :rtype: int
        """
        return self._last_id

    @last_id.setter
    def last_id(self, last_id):
        """Sets the last_id of this Pagination.

        The last ID rendered, if the request included the 'after_id' param.  # noqa: E501

        :param last_id: The last_id of this Pagination.  # noqa: E501
        :type: int
        """

        self._last_id = last_id

    @property
    def limit(self):
        """Gets the limit of this Pagination.  # noqa: E501


        :return: The limit of this Pagination.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Pagination.


        :param limit: The limit of this Pagination.  # noqa: E501
        :type: int
        """

        self._limit = limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pagination):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Pagination):
            return True

        return self.to_dict() != other.to_dict()
