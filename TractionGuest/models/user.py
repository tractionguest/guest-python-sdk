# coding: utf-8

"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.14.1
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from TractionGuest.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'mobile_access_enabled': 'bool',
        'permission_groups': 'list[Permission]',
        'email': 'str',
        'last_name': 'str',
        'first_name': 'str',
        'registration_portal_enabled': 'bool',
        'account_uuid': 'str'
    }

    attribute_map = {
        'id': 'id',
        'mobile_access_enabled': 'mobile_access_enabled',
        'permission_groups': 'permission_groups',
        'email': 'email',
        'last_name': 'last_name',
        'first_name': 'first_name',
        'registration_portal_enabled': 'registration_portal_enabled',
        'account_uuid': 'account_uuid'
    }

    def __init__(self, id=None, mobile_access_enabled=None, permission_groups=None, email=None, last_name=None, first_name=None, registration_portal_enabled=None, account_uuid=None, local_vars_configuration=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._mobile_access_enabled = None
        self._permission_groups = None
        self._email = None
        self._last_name = None
        self._first_name = None
        self._registration_portal_enabled = None
        self._account_uuid = None
        self.discriminator = None

        self.id = id
        self.mobile_access_enabled = mobile_access_enabled
        if permission_groups is not None:
            self.permission_groups = permission_groups
        self.email = email
        if last_name is not None:
            self.last_name = last_name
        if first_name is not None:
            self.first_name = first_name
        self.registration_portal_enabled = registration_portal_enabled
        if account_uuid is not None:
            self.account_uuid = account_uuid

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def mobile_access_enabled(self):
        """Gets the mobile_access_enabled of this User.  # noqa: E501

        Identifies if user has access to mobile app features.  # noqa: E501

        :return: The mobile_access_enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._mobile_access_enabled

    @mobile_access_enabled.setter
    def mobile_access_enabled(self, mobile_access_enabled):
        """Sets the mobile_access_enabled of this User.

        Identifies if user has access to mobile app features.  # noqa: E501

        :param mobile_access_enabled: The mobile_access_enabled of this User.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and mobile_access_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `mobile_access_enabled`, must not be `None`")  # noqa: E501

        self._mobile_access_enabled = mobile_access_enabled

    @property
    def permission_groups(self):
        """Gets the permission_groups of this User.  # noqa: E501


        :return: The permission_groups of this User.  # noqa: E501
        :rtype: list[Permission]
        """
        return self._permission_groups

    @permission_groups.setter
    def permission_groups(self, permission_groups):
        """Sets the permission_groups of this User.


        :param permission_groups: The permission_groups of this User.  # noqa: E501
        :type: list[Permission]
        """

        self._permission_groups = permission_groups

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501


        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501

        Determines if the registration portal has been enabled for this account  # noqa: E501

        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        Determines if the registration portal has been enabled for this account  # noqa: E501

        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def registration_portal_enabled(self):
        """Gets the registration_portal_enabled of this User.  # noqa: E501

        Determines if the registration portal has been enabled for this account  # noqa: E501

        :return: The registration_portal_enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._registration_portal_enabled

    @registration_portal_enabled.setter
    def registration_portal_enabled(self, registration_portal_enabled):
        """Sets the registration_portal_enabled of this User.

        Determines if the registration portal has been enabled for this account  # noqa: E501

        :param registration_portal_enabled: The registration_portal_enabled of this User.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and registration_portal_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `registration_portal_enabled`, must not be `None`")  # noqa: E501

        self._registration_portal_enabled = registration_portal_enabled

    @property
    def account_uuid(self):
        """Gets the account_uuid of this User.  # noqa: E501


        :return: The account_uuid of this User.  # noqa: E501
        :rtype: str
        """
        return self._account_uuid

    @account_uuid.setter
    def account_uuid(self, account_uuid):
        """Sets the account_uuid of this User.


        :param account_uuid: The account_uuid of this User.  # noqa: E501
        :type: str
        """

        self._account_uuid = account_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
