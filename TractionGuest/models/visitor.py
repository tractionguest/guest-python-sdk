# coding: utf-8

"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.14.1
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from TractionGuest.configuration import Configuration


class Visitor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'active': 'bool',
        'company': 'str',
        'created_via': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'mobile': 'str',
        'note': 'str',
        'profile_pic_content_type': 'str',
        'profile_pic_file_name': 'str',
        'profile_pic_file_size': 'str',
        'profile_pic_updated_at': 'str',
        'watchlist_level': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'active': 'active',
        'company': 'company',
        'created_via': 'created_via',
        'email': 'email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'mobile': 'mobile',
        'note': 'note',
        'profile_pic_content_type': 'profile_pic_content_type',
        'profile_pic_file_name': 'profile_pic_file_name',
        'profile_pic_file_size': 'profile_pic_file_size',
        'profile_pic_updated_at': 'profile_pic_updated_at',
        'watchlist_level': 'watchlist_level',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, active=None, company=None, created_via=None, email=None, first_name=None, last_name=None, mobile=None, note=None, profile_pic_content_type=None, profile_pic_file_name=None, profile_pic_file_size=None, profile_pic_updated_at=None, watchlist_level=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Visitor - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._active = None
        self._company = None
        self._created_via = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._mobile = None
        self._note = None
        self._profile_pic_content_type = None
        self._profile_pic_file_name = None
        self._profile_pic_file_size = None
        self._profile_pic_updated_at = None
        self._watchlist_level = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if active is not None:
            self.active = active
        if company is not None:
            self.company = company
        if created_via is not None:
            self.created_via = created_via
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if mobile is not None:
            self.mobile = mobile
        if note is not None:
            self.note = note
        if profile_pic_content_type is not None:
            self.profile_pic_content_type = profile_pic_content_type
        if profile_pic_file_name is not None:
            self.profile_pic_file_name = profile_pic_file_name
        if profile_pic_file_size is not None:
            self.profile_pic_file_size = profile_pic_file_size
        if profile_pic_updated_at is not None:
            self.profile_pic_updated_at = profile_pic_updated_at
        if watchlist_level is not None:
            self.watchlist_level = watchlist_level
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Visitor.  # noqa: E501

        UUID  # noqa: E501

        :return: The id of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Visitor.

        UUID  # noqa: E501

        :param id: The id of this Visitor.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def active(self):
        """Gets the active of this Visitor.  # noqa: E501


        :return: The active of this Visitor.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Visitor.


        :param active: The active of this Visitor.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def company(self):
        """Gets the company of this Visitor.  # noqa: E501


        :return: The company of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Visitor.


        :param company: The company of this Visitor.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def created_via(self):
        """Gets the created_via of this Visitor.  # noqa: E501


        :return: The created_via of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._created_via

    @created_via.setter
    def created_via(self, created_via):
        """Sets the created_via of this Visitor.


        :param created_via: The created_via of this Visitor.  # noqa: E501
        :type: str
        """

        self._created_via = created_via

    @property
    def email(self):
        """Gets the email of this Visitor.  # noqa: E501


        :return: The email of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Visitor.


        :param email: The email of this Visitor.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Visitor.  # noqa: E501


        :return: The first_name of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Visitor.


        :param first_name: The first_name of this Visitor.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Visitor.  # noqa: E501


        :return: The last_name of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Visitor.


        :param last_name: The last_name of this Visitor.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def mobile(self):
        """Gets the mobile of this Visitor.  # noqa: E501


        :return: The mobile of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Visitor.


        :param mobile: The mobile of this Visitor.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def note(self):
        """Gets the note of this Visitor.  # noqa: E501


        :return: The note of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Visitor.


        :param note: The note of this Visitor.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def profile_pic_content_type(self):
        """Gets the profile_pic_content_type of this Visitor.  # noqa: E501


        :return: The profile_pic_content_type of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._profile_pic_content_type

    @profile_pic_content_type.setter
    def profile_pic_content_type(self, profile_pic_content_type):
        """Sets the profile_pic_content_type of this Visitor.


        :param profile_pic_content_type: The profile_pic_content_type of this Visitor.  # noqa: E501
        :type: str
        """

        self._profile_pic_content_type = profile_pic_content_type

    @property
    def profile_pic_file_name(self):
        """Gets the profile_pic_file_name of this Visitor.  # noqa: E501


        :return: The profile_pic_file_name of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._profile_pic_file_name

    @profile_pic_file_name.setter
    def profile_pic_file_name(self, profile_pic_file_name):
        """Sets the profile_pic_file_name of this Visitor.


        :param profile_pic_file_name: The profile_pic_file_name of this Visitor.  # noqa: E501
        :type: str
        """

        self._profile_pic_file_name = profile_pic_file_name

    @property
    def profile_pic_file_size(self):
        """Gets the profile_pic_file_size of this Visitor.  # noqa: E501


        :return: The profile_pic_file_size of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._profile_pic_file_size

    @profile_pic_file_size.setter
    def profile_pic_file_size(self, profile_pic_file_size):
        """Sets the profile_pic_file_size of this Visitor.


        :param profile_pic_file_size: The profile_pic_file_size of this Visitor.  # noqa: E501
        :type: str
        """

        self._profile_pic_file_size = profile_pic_file_size

    @property
    def profile_pic_updated_at(self):
        """Gets the profile_pic_updated_at of this Visitor.  # noqa: E501


        :return: The profile_pic_updated_at of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._profile_pic_updated_at

    @profile_pic_updated_at.setter
    def profile_pic_updated_at(self, profile_pic_updated_at):
        """Sets the profile_pic_updated_at of this Visitor.


        :param profile_pic_updated_at: The profile_pic_updated_at of this Visitor.  # noqa: E501
        :type: str
        """

        self._profile_pic_updated_at = profile_pic_updated_at

    @property
    def watchlist_level(self):
        """Gets the watchlist_level of this Visitor.  # noqa: E501


        :return: The watchlist_level of this Visitor.  # noqa: E501
        :rtype: str
        """
        return self._watchlist_level

    @watchlist_level.setter
    def watchlist_level(self, watchlist_level):
        """Sets the watchlist_level of this Visitor.


        :param watchlist_level: The watchlist_level of this Visitor.  # noqa: E501
        :type: str
        """

        self._watchlist_level = watchlist_level

    @property
    def created_at(self):
        """Gets the created_at of this Visitor.  # noqa: E501


        :return: The created_at of this Visitor.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Visitor.


        :param created_at: The created_at of this Visitor.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Visitor.  # noqa: E501


        :return: The updated_at of this Visitor.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Visitor.


        :param updated_at: The updated_at of this Visitor.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Visitor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Visitor):
            return True

        return self.to_dict() != other.to_dict()
