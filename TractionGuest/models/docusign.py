# coding: utf-8

"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.14.1
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from TractionGuest.configuration import Configuration


class Docusign(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'template_id': 'str',
        'integration': 'str',
        'nda_status': 'str',
        'nda_signed_date': 'datetime',
        'envelope_id': 'str',
        'sequence': 'str',
        'docusign_id': 'str',
        'docusign_name': 'str',
        'title': 'str'
    }

    attribute_map = {
        'template_id': 'template_id',
        'integration': 'integration',
        'nda_status': 'nda_status',
        'nda_signed_date': 'nda_signed_date',
        'envelope_id': 'envelope_id',
        'sequence': 'sequence',
        'docusign_id': 'docusign_id',
        'docusign_name': 'docusign_name',
        'title': 'title'
    }

    def __init__(self, template_id=None, integration=None, nda_status=None, nda_signed_date=None, envelope_id=None, sequence=None, docusign_id=None, docusign_name=None, title=None, local_vars_configuration=None):  # noqa: E501
        """Docusign - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._template_id = None
        self._integration = None
        self._nda_status = None
        self._nda_signed_date = None
        self._envelope_id = None
        self._sequence = None
        self._docusign_id = None
        self._docusign_name = None
        self._title = None
        self.discriminator = None

        if template_id is not None:
            self.template_id = template_id
        if integration is not None:
            self.integration = integration
        if nda_status is not None:
            self.nda_status = nda_status
        if nda_signed_date is not None:
            self.nda_signed_date = nda_signed_date
        if envelope_id is not None:
            self.envelope_id = envelope_id
        if sequence is not None:
            self.sequence = sequence
        if docusign_id is not None:
            self.docusign_id = docusign_id
        if docusign_name is not None:
            self.docusign_name = docusign_name
        if title is not None:
            self.title = title

    @property
    def template_id(self):
        """Gets the template_id of this Docusign.  # noqa: E501

          # noqa: E501

        :return: The template_id of this Docusign.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this Docusign.

          # noqa: E501

        :param template_id: The template_id of this Docusign.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def integration(self):
        """Gets the integration of this Docusign.  # noqa: E501

          # noqa: E501

        :return: The integration of this Docusign.  # noqa: E501
        :rtype: str
        """
        return self._integration

    @integration.setter
    def integration(self, integration):
        """Sets the integration of this Docusign.

          # noqa: E501

        :param integration: The integration of this Docusign.  # noqa: E501
        :type: str
        """

        self._integration = integration

    @property
    def nda_status(self):
        """Gets the nda_status of this Docusign.  # noqa: E501

          # noqa: E501

        :return: The nda_status of this Docusign.  # noqa: E501
        :rtype: str
        """
        return self._nda_status

    @nda_status.setter
    def nda_status(self, nda_status):
        """Sets the nda_status of this Docusign.

          # noqa: E501

        :param nda_status: The nda_status of this Docusign.  # noqa: E501
        :type: str
        """

        self._nda_status = nda_status

    @property
    def nda_signed_date(self):
        """Gets the nda_signed_date of this Docusign.  # noqa: E501

          # noqa: E501

        :return: The nda_signed_date of this Docusign.  # noqa: E501
        :rtype: datetime
        """
        return self._nda_signed_date

    @nda_signed_date.setter
    def nda_signed_date(self, nda_signed_date):
        """Sets the nda_signed_date of this Docusign.

          # noqa: E501

        :param nda_signed_date: The nda_signed_date of this Docusign.  # noqa: E501
        :type: datetime
        """

        self._nda_signed_date = nda_signed_date

    @property
    def envelope_id(self):
        """Gets the envelope_id of this Docusign.  # noqa: E501

          # noqa: E501

        :return: The envelope_id of this Docusign.  # noqa: E501
        :rtype: str
        """
        return self._envelope_id

    @envelope_id.setter
    def envelope_id(self, envelope_id):
        """Sets the envelope_id of this Docusign.

          # noqa: E501

        :param envelope_id: The envelope_id of this Docusign.  # noqa: E501
        :type: str
        """

        self._envelope_id = envelope_id

    @property
    def sequence(self):
        """Gets the sequence of this Docusign.  # noqa: E501

          # noqa: E501

        :return: The sequence of this Docusign.  # noqa: E501
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Docusign.

          # noqa: E501

        :param sequence: The sequence of this Docusign.  # noqa: E501
        :type: str
        """

        self._sequence = sequence

    @property
    def docusign_id(self):
        """Gets the docusign_id of this Docusign.  # noqa: E501

          # noqa: E501

        :return: The docusign_id of this Docusign.  # noqa: E501
        :rtype: str
        """
        return self._docusign_id

    @docusign_id.setter
    def docusign_id(self, docusign_id):
        """Sets the docusign_id of this Docusign.

          # noqa: E501

        :param docusign_id: The docusign_id of this Docusign.  # noqa: E501
        :type: str
        """

        self._docusign_id = docusign_id

    @property
    def docusign_name(self):
        """Gets the docusign_name of this Docusign.  # noqa: E501

          # noqa: E501

        :return: The docusign_name of this Docusign.  # noqa: E501
        :rtype: str
        """
        return self._docusign_name

    @docusign_name.setter
    def docusign_name(self, docusign_name):
        """Sets the docusign_name of this Docusign.

          # noqa: E501

        :param docusign_name: The docusign_name of this Docusign.  # noqa: E501
        :type: str
        """

        self._docusign_name = docusign_name

    @property
    def title(self):
        """Gets the title of this Docusign.  # noqa: E501

          # noqa: E501

        :return: The title of this Docusign.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Docusign.

          # noqa: E501

        :param title: The title of this Docusign.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Docusign):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Docusign):
            return True

        return self.to_dict() != other.to_dict()
