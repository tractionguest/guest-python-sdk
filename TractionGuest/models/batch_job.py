# coding: utf-8

"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from TractionGuest.configuration import Configuration


class BatchJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bid': 'str',
        'created_at': 'str',
        'status': 'str',
        'total_records': 'int',
        'worker_name': 'str',
        'user': 'User',
        'pending': 'int',
        'completed': 'int',
        'failed': 'int'
    }

    attribute_map = {
        'bid': 'bid',
        'created_at': 'created_at',
        'status': 'status',
        'total_records': 'total_records',
        'worker_name': 'worker_name',
        'user': 'user',
        'pending': 'pending',
        'completed': 'completed',
        'failed': 'failed'
    }

    def __init__(self, bid=None, created_at=None, status=None, total_records=None, worker_name=None, user=None, pending=None, completed=None, failed=None, local_vars_configuration=None):  # noqa: E501
        """BatchJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bid = None
        self._created_at = None
        self._status = None
        self._total_records = None
        self._worker_name = None
        self._user = None
        self._pending = None
        self._completed = None
        self._failed = None
        self.discriminator = None

        if bid is not None:
            self.bid = bid
        if created_at is not None:
            self.created_at = created_at
        if status is not None:
            self.status = status
        if total_records is not None:
            self.total_records = total_records
        if worker_name is not None:
            self.worker_name = worker_name
        if user is not None:
            self.user = user
        if pending is not None:
            self.pending = pending
        if completed is not None:
            self.completed = completed
        if failed is not None:
            self.failed = failed

    @property
    def bid(self):
        """Gets the bid of this BatchJob.  # noqa: E501


        :return: The bid of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this BatchJob.


        :param bid: The bid of this BatchJob.  # noqa: E501
        :type: str
        """

        self._bid = bid

    @property
    def created_at(self):
        """Gets the created_at of this BatchJob.  # noqa: E501


        :return: The created_at of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BatchJob.


        :param created_at: The created_at of this BatchJob.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def status(self):
        """Gets the status of this BatchJob.  # noqa: E501


        :return: The status of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BatchJob.


        :param status: The status of this BatchJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def total_records(self):
        """Gets the total_records of this BatchJob.  # noqa: E501


        :return: The total_records of this BatchJob.  # noqa: E501
        :rtype: int
        """
        return self._total_records

    @total_records.setter
    def total_records(self, total_records):
        """Sets the total_records of this BatchJob.


        :param total_records: The total_records of this BatchJob.  # noqa: E501
        :type: int
        """

        self._total_records = total_records

    @property
    def worker_name(self):
        """Gets the worker_name of this BatchJob.  # noqa: E501


        :return: The worker_name of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._worker_name

    @worker_name.setter
    def worker_name(self, worker_name):
        """Sets the worker_name of this BatchJob.


        :param worker_name: The worker_name of this BatchJob.  # noqa: E501
        :type: str
        """

        self._worker_name = worker_name

    @property
    def user(self):
        """Gets the user of this BatchJob.  # noqa: E501


        :return: The user of this BatchJob.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this BatchJob.


        :param user: The user of this BatchJob.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def pending(self):
        """Gets the pending of this BatchJob.  # noqa: E501


        :return: The pending of this BatchJob.  # noqa: E501
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this BatchJob.


        :param pending: The pending of this BatchJob.  # noqa: E501
        :type: int
        """

        self._pending = pending

    @property
    def completed(self):
        """Gets the completed of this BatchJob.  # noqa: E501


        :return: The completed of this BatchJob.  # noqa: E501
        :rtype: int
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this BatchJob.


        :param completed: The completed of this BatchJob.  # noqa: E501
        :type: int
        """

        self._completed = completed

    @property
    def failed(self):
        """Gets the failed of this BatchJob.  # noqa: E501


        :return: The failed of this BatchJob.  # noqa: E501
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this BatchJob.


        :param failed: The failed of this BatchJob.  # noqa: E501
        :type: int
        """

        self._failed = failed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BatchJob):
            return True

        return self.to_dict() != other.to_dict()
