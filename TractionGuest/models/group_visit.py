# coding: utf-8

"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.15.0
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from TractionGuest.configuration import Configuration


class GroupVisit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'location': 'Location',
        'hosts': 'list[Host]',
        'name': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'registration_limit': 'int',
        'registration_url': 'str',
        'invites_count': 'int',
        'unconfirmed_registrations_count': 'int',
        'manual_registration_approval': 'bool',
        'public_registration_enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'location': 'location',
        'hosts': 'hosts',
        'name': 'name',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'registration_limit': 'registration_limit',
        'registration_url': 'registration_url',
        'invites_count': 'invites_count',
        'unconfirmed_registrations_count': 'unconfirmed_registrations_count',
        'manual_registration_approval': 'manual_registration_approval',
        'public_registration_enabled': 'public_registration_enabled'
    }

    def __init__(self, id=None, location=None, hosts=None, name=None, start_time=None, end_time=None, created_at=None, updated_at=None, registration_limit=None, registration_url=None, invites_count=None, unconfirmed_registrations_count=None, manual_registration_approval=None, public_registration_enabled=None, local_vars_configuration=None):  # noqa: E501
        """GroupVisit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._location = None
        self._hosts = None
        self._name = None
        self._start_time = None
        self._end_time = None
        self._created_at = None
        self._updated_at = None
        self._registration_limit = None
        self._registration_url = None
        self._invites_count = None
        self._unconfirmed_registrations_count = None
        self._manual_registration_approval = None
        self._public_registration_enabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if hosts is not None:
            self.hosts = hosts
        if name is not None:
            self.name = name
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        self.registration_limit = registration_limit
        self.registration_url = registration_url
        if invites_count is not None:
            self.invites_count = invites_count
        if unconfirmed_registrations_count is not None:
            self.unconfirmed_registrations_count = unconfirmed_registrations_count
        if manual_registration_approval is not None:
            self.manual_registration_approval = manual_registration_approval
        if public_registration_enabled is not None:
            self.public_registration_enabled = public_registration_enabled

    @property
    def id(self):
        """Gets the id of this GroupVisit.  # noqa: E501


        :return: The id of this GroupVisit.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupVisit.


        :param id: The id of this GroupVisit.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this GroupVisit.  # noqa: E501


        :return: The location of this GroupVisit.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GroupVisit.


        :param location: The location of this GroupVisit.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def hosts(self):
        """Gets the hosts of this GroupVisit.  # noqa: E501


        :return: The hosts of this GroupVisit.  # noqa: E501
        :rtype: list[Host]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this GroupVisit.


        :param hosts: The hosts of this GroupVisit.  # noqa: E501
        :type: list[Host]
        """

        self._hosts = hosts

    @property
    def name(self):
        """Gets the name of this GroupVisit.  # noqa: E501


        :return: The name of this GroupVisit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupVisit.


        :param name: The name of this GroupVisit.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this GroupVisit.  # noqa: E501


        :return: The start_time of this GroupVisit.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GroupVisit.


        :param start_time: The start_time of this GroupVisit.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GroupVisit.  # noqa: E501


        :return: The end_time of this GroupVisit.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GroupVisit.


        :param end_time: The end_time of this GroupVisit.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def created_at(self):
        """Gets the created_at of this GroupVisit.  # noqa: E501


        :return: The created_at of this GroupVisit.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GroupVisit.


        :param created_at: The created_at of this GroupVisit.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this GroupVisit.  # noqa: E501


        :return: The updated_at of this GroupVisit.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GroupVisit.


        :param updated_at: The updated_at of this GroupVisit.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def registration_limit(self):
        """Gets the registration_limit of this GroupVisit.  # noqa: E501


        :return: The registration_limit of this GroupVisit.  # noqa: E501
        :rtype: int
        """
        return self._registration_limit

    @registration_limit.setter
    def registration_limit(self, registration_limit):
        """Sets the registration_limit of this GroupVisit.


        :param registration_limit: The registration_limit of this GroupVisit.  # noqa: E501
        :type: int
        """

        self._registration_limit = registration_limit

    @property
    def registration_url(self):
        """Gets the registration_url of this GroupVisit.  # noqa: E501


        :return: The registration_url of this GroupVisit.  # noqa: E501
        :rtype: str
        """
        return self._registration_url

    @registration_url.setter
    def registration_url(self, registration_url):
        """Sets the registration_url of this GroupVisit.


        :param registration_url: The registration_url of this GroupVisit.  # noqa: E501
        :type: str
        """

        self._registration_url = registration_url

    @property
    def invites_count(self):
        """Gets the invites_count of this GroupVisit.  # noqa: E501


        :return: The invites_count of this GroupVisit.  # noqa: E501
        :rtype: int
        """
        return self._invites_count

    @invites_count.setter
    def invites_count(self, invites_count):
        """Sets the invites_count of this GroupVisit.


        :param invites_count: The invites_count of this GroupVisit.  # noqa: E501
        :type: int
        """

        self._invites_count = invites_count

    @property
    def unconfirmed_registrations_count(self):
        """Gets the unconfirmed_registrations_count of this GroupVisit.  # noqa: E501


        :return: The unconfirmed_registrations_count of this GroupVisit.  # noqa: E501
        :rtype: int
        """
        return self._unconfirmed_registrations_count

    @unconfirmed_registrations_count.setter
    def unconfirmed_registrations_count(self, unconfirmed_registrations_count):
        """Sets the unconfirmed_registrations_count of this GroupVisit.


        :param unconfirmed_registrations_count: The unconfirmed_registrations_count of this GroupVisit.  # noqa: E501
        :type: int
        """

        self._unconfirmed_registrations_count = unconfirmed_registrations_count

    @property
    def manual_registration_approval(self):
        """Gets the manual_registration_approval of this GroupVisit.  # noqa: E501


        :return: The manual_registration_approval of this GroupVisit.  # noqa: E501
        :rtype: bool
        """
        return self._manual_registration_approval

    @manual_registration_approval.setter
    def manual_registration_approval(self, manual_registration_approval):
        """Sets the manual_registration_approval of this GroupVisit.


        :param manual_registration_approval: The manual_registration_approval of this GroupVisit.  # noqa: E501
        :type: bool
        """

        self._manual_registration_approval = manual_registration_approval

    @property
    def public_registration_enabled(self):
        """Gets the public_registration_enabled of this GroupVisit.  # noqa: E501


        :return: The public_registration_enabled of this GroupVisit.  # noqa: E501
        :rtype: bool
        """
        return self._public_registration_enabled

    @public_registration_enabled.setter
    def public_registration_enabled(self, public_registration_enabled):
        """Sets the public_registration_enabled of this GroupVisit.


        :param public_registration_enabled: The public_registration_enabled of this GroupVisit.  # noqa: E501
        :type: bool
        """

        self._public_registration_enabled = public_registration_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupVisit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupVisit):
            return True

        return self.to_dict() != other.to_dict()
