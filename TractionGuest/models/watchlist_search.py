# coding: utf-8

"""
    Traction Guest API

    The Traction Guest API is currently under limited release to select customers as we gather and iterate on feedback.  # Getting Started If you are interested in getting early access to the API, please send us an email to [support@tractionguest.com](mailto:support@tractionguest.com).  We will also add you to our Slack channel where you can ask questions and get further help.  # Terms and Conditions Please visit: [https://tractionguest.com/tos/api/](https://tractionguest.com/tos/api/)  # Versioning This API follows [semantic versioning](https://semver.org/), which follows the `Major`.`Minor`.`Patch` format.  * The `Major` number increments when potentially incompatible changes are made. * The `Minor` number increments when backwards-compatible additions are made. * The `Patch` number increments when backwards-compatible bug-fixes are made.   # noqa: E501

    The version of the OpenAPI document: 0.18.0
    Contact: support@tractionguest.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from TractionGuest.configuration import Configuration


class WatchlistSearch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'company': 'str',
        'city': 'str',
        'country': 'str',
        'state': 'str'
    }

    attribute_map = {
        'name': 'name',
        'company': 'company',
        'city': 'city',
        'country': 'country',
        'state': 'state'
    }

    def __init__(self, name=None, company=None, city=None, country=None, state=None, local_vars_configuration=None):  # noqa: E501
        """WatchlistSearch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._company = None
        self._city = None
        self._country = None
        self._state = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if company is not None:
            self.company = company
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if state is not None:
            self.state = state

    @property
    def name(self):
        """Gets the name of this WatchlistSearch.  # noqa: E501


        :return: The name of this WatchlistSearch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WatchlistSearch.


        :param name: The name of this WatchlistSearch.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def company(self):
        """Gets the company of this WatchlistSearch.  # noqa: E501


        :return: The company of this WatchlistSearch.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this WatchlistSearch.


        :param company: The company of this WatchlistSearch.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def city(self):
        """Gets the city of this WatchlistSearch.  # noqa: E501


        :return: The city of this WatchlistSearch.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this WatchlistSearch.


        :param city: The city of this WatchlistSearch.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this WatchlistSearch.  # noqa: E501


        :return: The country of this WatchlistSearch.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this WatchlistSearch.


        :param country: The country of this WatchlistSearch.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def state(self):
        """Gets the state of this WatchlistSearch.  # noqa: E501


        :return: The state of this WatchlistSearch.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WatchlistSearch.


        :param state: The state of this WatchlistSearch.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WatchlistSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WatchlistSearch):
            return True

        return self.to_dict() != other.to_dict()
